pipeline {
    agent any
    environment{
        DOCKER_TAG = getDockerTag()
        BRANCH_NAME = getBranchName()
        DATE_TIME = getDateTimeTag()
        KUBECONFIG = "/home/ubuntu/.kube/config"
    }

    stages{

        stage('Unit tests'){
            steps{
                sh "dotnet test aspcore-k8s.Tests/aspcore-k8s.Tests.csproj"
            }  
        }

        stage('Build Docker Image on test'){
            when { 
                expression { "${BRANCH_NAME}" == "test" }
            }
            steps{
                sh "docker build ./aspcore-k8s -t kwazi1984/aspcore3.1-multibranch-k8s:test-${DATE_TIME} "
            }
        }

        stage('Build Docker Image on prod'){
            when { 
                expression { "${BRANCH_NAME}" == "master" }
            }
            steps{
                sh "docker build ./aspcore-k8s -t kwazi1984/aspcore3.1-multibranch-k8s:master-${DATE_TIME} "
            }
        }

        stage('DockerHub Push prod image'){
            when { 
                expression { "${BRANCH_NAME}" == "master" }
            }
            steps{
                withCredentials([string(credentialsId: 'docker-hub', variable: 'dockerHubPwd')]) {
                    sh "docker login -u kwazi1984 -p ${dockerHubPwd}"
                    sh "docker push kwazi1984/aspcore3.1-multibranch-k8s:master-${DATE_TIME}"
                }
            }
        }
        
        stage('Deploy to Kubernetes on test'){
            when { 
                expression { "${BRANCH_NAME}" == "test" }
            }
            steps{               
                sh "chmod +x aspcore-k8s/k8s-test/changeTag.sh"
                sh "./aspcore-k8s/k8s-test/changeTag.sh test-${DATE_TIME}"

                script{
                        try{
                            sh "kubectl apply -f ./aspcore-k8s/k8s-test/. -n aspcore-k8s-test"
                        }catch(error){
                            sh "kubectl create -f ./aspcore-k8s/k8s-test/. -n aspcore-k8s-test"
                        }
                    }     
            }
        }

        stage('Deploy to Kubernetes on prod'){
            when { 
                expression { "${BRANCH_NAME}" == "master" }
            }            
            steps{               
                sh "chmod +x aspcore-k8s/k8s-prod/changeTag.sh"
                sh "./aspcore-k8s/k8s-prod/changeTag.sh master-${DATE_TIME}"

                script{
                        try{
                            sh "kubectl apply -f ./aspcore-k8s/k8s-prod/. -n aspcore-k8s-prod"
                        }catch(error){
                            sh "kubectl create -f ./aspcore-k8s/k8s-prod/. -n aspcore-k8s-prod"
                        }
                    }     
            }
        }

    }
}

def getDockerTag(){
    def tag  = sh script: 'git rev-parse HEAD', returnStdout: true
    return tag
}

def getDateTimeTag(){
    def tag  = sh script: 'date +"%Y%m%dT%I%M%S"', returnStdout: true
    return tag
}

def getBranchName(){
    def branch = sh(returnStdout: true, script: 'git rev-parse --abbrev-ref HEAD').trim()
    return branch
}